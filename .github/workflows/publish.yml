name: .NET 8.0 Build, Publish, and Artifact Upload

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*.*.*'

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup .NET 8.0
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore Dependencies
        run: dotnet restore GateSwitchWay.sln

      - name: Build Solution
        run: dotnet build GateSwitchWay.sln --configuration Release --no-restore

      - name: Basic Validation
        run: |
          echo "Validating project structure and basic compilation..."
          # Check if key files exist
          if (!(Test-Path "GateSwitchWay.csproj")) { throw "Project file not found" }
          if (!(Test-Path "Program.cs")) { throw "Program.cs not found" }
          if (!(Test-Path "MainForm.cs")) { throw "MainForm.cs not found" }
          if (!(Test-Path "app.manifest")) { throw "Application manifest not found" }
          
          # Check if built output exists
          if (!(Test-Path "bin\Release\net8.0-windows\GateSwitchWay.dll")) { throw "Build output not found" }
          
          echo "âœ“ All validation checks passed"
        shell: pwsh

      - name: Publish Full Install (Self-Contained)
        run: |
          try {
            $version = git describe --tags --abbrev=0 2>$null
            if ($LASTEXITCODE -ne 0) {
              $version = "0.0.0"
            }
          } catch {
            $version = "0.0.0"
          }
          echo "Building version: $version"
          
          # Create full install (self-contained with .NET runtime)
          echo "Creating full install package..."
          dotnet publish GateSwitchWay.csproj `
            --configuration Release `
            --runtime win-x64 `
            --self-contained true `
            --output "publish-full" `
            -p:PublishSingleFile=true `
            -p:IncludeNativeLibrariesForSelfExtract=true `
            -p:PublishTrimmed=false `
            -p:AssemblyName="GateSwitchWay-$version-full"
          
          # Verify the full install executable was created
          $exePathFull = "publish-full\GateSwitchWay-$version-full.exe"
          if (Test-Path $exePathFull) {
            $sizeFull = (Get-Item $exePathFull).Length
            echo "Successfully created full install: $exePathFull (Size: $([math]::Round($sizeFull / 1MB, 2)) MB)"
            # Copy to root for artifact upload
            Copy-Item $exePathFull "GateSwitchWay-$version-full.exe"
          } else {
            echo "ERROR: Full install executable not found at $exePathFull"
            exit 1
          }
        shell: pwsh

      - name: Publish Update Package (Framework-Dependent)
        run: |
          try {
            $version = git describe --tags --abbrev=0 2>$null
            if ($LASTEXITCODE -ne 0) {
              $version = "0.0.0"
            }
          } catch {
            $version = "0.0.0"
          }
          
          # Create update package (framework-dependent, requires .NET 8 runtime)
          echo "Creating update package..."
          dotnet publish GateSwitchWay.csproj `
            --configuration Release `
            --runtime win-x64 `
            --self-contained false `
            --output "publish-update" `
            -p:PublishSingleFile=true `
            -p:AssemblyName="GateSwitchWay-$version-update"
          
          # Verify the update executable was created
          $exePathUpdate = "publish-update\GateSwitchWay-$version-update.exe"
          if (Test-Path $exePathUpdate) {
            $sizeUpdate = (Get-Item $exePathUpdate).Length
            echo "Successfully created update package: $exePathUpdate (Size: $([math]::Round($sizeUpdate / 1KB, 2)) KB)"
            # Copy to root for artifact upload
            Copy-Item $exePathUpdate "GateSwitchWay-$version-update.exe"
          } else {
            echo "ERROR: Update executable not found at $exePathUpdate"
            exit 1
          }
        shell: pwsh

      - name: Upload Full Install Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: full-install
          path: GateSwitchWay-*-full.exe
          
      - name: Upload Update Package Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: update-package
          path: GateSwitchWay-*-update.exe
          
      - name: Artifact Information
        run: |
          echo "Build completed successfully!"
          echo ""
          echo "=== FULL INSTALL PACKAGE ==="
          Get-ChildItem "GateSwitchWay-*-full.exe" | ForEach-Object {
            $size = [math]::Round($_.Length / 1MB, 2)
            echo "  - File: $($_.Name)"
            echo "  - Size: $size MB"
            echo "  - Use case: Clean installation (includes .NET runtime)"
            echo "  - Requirements: None - runs on any Windows system"
          }
          echo ""
          echo "=== UPDATE PACKAGE ==="
          Get-ChildItem "GateSwitchWay-*-update.exe" | ForEach-Object {
            $size = [math]::Round($_.Length / 1KB, 2)
            echo "  - File: $($_.Name)"
            echo "  - Size: $size KB"
            echo "  - Use case: Updates for existing installations"
            echo "  - Requirements: .NET 8 runtime must be pre-installed"
          }
          echo ""
          echo "=== DOWNLOAD INSTRUCTIONS ==="
          echo "1. Go to the Actions tab in GitHub"
          echo "2. Click on this workflow run"
          echo "3. Choose the appropriate download:"
          echo "   - 'full-install' for new installations (~60MB)"
          echo "   - 'update-package' for updates (~0.5MB, requires .NET 8)"
          echo "4. Extract and run as Administrator (required for network configuration)"
          echo ""
          echo "=== PACKAGE COMPARISON ==="
          $fullSize = (Get-Item "GateSwitchWay-*-full.exe").Length
          $updateSize = (Get-Item "GateSwitchWay-*-update.exe").Length
          $ratio = [math]::Round($fullSize / $updateSize, 1)
          echo "  - Full install: $([math]::Round($fullSize / 1MB, 1)) MB"
          echo "  - Update package: $([math]::Round($updateSize / 1KB, 1)) KB"
          echo "  - Size reduction: ${ratio}x smaller for updates"
        shell: pwsh
